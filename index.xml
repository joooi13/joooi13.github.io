<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Yu Joi</title><link>https://joooi13.github.io/</link><description>Recent content on Yu Joi</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Fri, 18 Mar 2022 00:00:00 +0000</lastBuildDate><atom:link href="https://joooi13.github.io/index.xml" rel="self" type="application/rss+xml"/><item><title>[Kaggle初心者] Titanicの次へ行きたい</title><link>https://joooi13.github.io/posts/titanic/</link><pubDate>Fri, 18 Mar 2022 00:00:00 +0000</pubDate><guid>https://joooi13.github.io/posts/titanic/</guid><description>はじめに 機会学習初心者が Titanic の先へ行きたいとがむしゃらに頑張ったことをまとめます。
この記事はメダルが取れる方法ではありません。
Titanic で挫折しそうな人が読んでくれたら嬉しいなと思って書きます。
Titanic をやる そもそもなぜ Kaggle に挑戦することになったかと言うと、所属する部内で「Kaggle で取り組んだことアウトプットしようぜ！メダル目指そうぜ！」といった流れがありました。この流れに乗ってワイワイ取り組みたかったのと、どこかで機械学習に触れないとなと思っていたので参加することにしました。
「まずは Titanic に取り組んだら良い」と有識者に教えてもらったので、やってみることにしました。Titanic の Competition は、Kaggle の中でもチュートリアルのような存在として有名で、まずは最初に取り組むべき課題の 1 つです。なので、一旦ここで初 Submit をキメることを目標とします。なんか分からんけどとにかく提出。
ここで挫折しそうな人は、Titanic は正直ネット検索したら色々術が出てきますので、それを参考にしたらいいと思います。まずフローを知ることが必要かなと信じ、とにかく提出です。
Titanic - Machine Learning from Disaster
基礎 分からないことが自覚できたので、基礎をやります。
Kaggle 公式が公開している lerning があるので、そこから自分に足りないものを実施しました。
Learn Python, Data Viz, Pandas &amp;amp; More | Tutorials | Kaggle
Python Pandas intro-to-machine-learning 私はこれらに取り組みました。
Intro to machine learning の課題の中で、Housing Prices Competition for Kaggle Learn Users というタイトルの Competition に Submit できます。公式によると、この learning は数ヶ月ではなく数時間でこなせる程度のボリュームであるとのこと。本当か？笑</description></item><item><title>推し時間</title><link>https://joooi13.github.io/posts/oshi_countdown/</link><pubDate>Tue, 30 Nov 2021 00:00:00 +0000</pubDate><guid>https://joooi13.github.io/posts/oshi_countdown/</guid><description> 概要 大切な時間までカウントダウンするアプリです。
推し時間
使用技術 Flutter</description></item><item><title>Hi! Hangul</title><link>https://joooi13.github.io/posts/hi_hangul/</link><pubDate>Sun, 21 Nov 2021 00:00:00 +0000</pubDate><guid>https://joooi13.github.io/posts/hi_hangul/</guid><description> 概要 クイズ形式でハングルを学べるアプリです。
4 択の問題が出題され、10 問答えたら成績を表示するようにしています。
Hi! Hangul
使用技術 Flutter</description></item><item><title>2021年の朝活まとめ</title><link>https://joooi13.github.io/posts/asakatsu2021/</link><pubDate>Tue, 16 Nov 2021 00:00:00 +0000</pubDate><guid>https://joooi13.github.io/posts/asakatsu2021/</guid><description>2020 年 11 月から今月まで、約 1 年間の朝活を続けることに成功しました。
自分えらい。ぱちぱち..
自宅から徒歩 15 分くらいのコワーキングスペースを契約して、 天気が悪い日や体調の悪い日や寝坊した日を除くと、
だいたい平日週 3,4 日は頑張って通いました〜
きっかけ 2020/11 頃、近所にコワーキングスペースが新規オープンするよというお知らせを見たことです。プランは色々ありましたが、攻めの姿勢で朝 7 時〜10 時のプランにしました。当時は日々刺激がなく、生活の流れを変えたかったんだと思います。（リモートワークになり、夜遅くまでだらだらして朝も 10 時の就業ぎりぎりに起き、のんびりだけど刺激がない感じでした。）このきっかけで、自分の生活リズムがガラッと変わりました。
また、スペースが自宅から徒歩 15 分ということで往復で 4000 歩くらい歩く為、明らかに健康になりました。思い返すと真冬と真夏はよく通えたなと思いますが、自分は貧乏性なので通わないと勿体ないという気持ちを作ることができたのが続けられる要因の 1 つになったと思います笑
なにをしたか 最初は仕事をしていることが多かったです。 仕事をしてしまっていたのほうが正しいかもしれません。
結構見切り発車的に契約したので、やりたいことも定まらずあまりよくない状態でした。まあとりあえず朝型になるみたいな思いだけを持ってました。
ただ 2021 年になってからは Flutter に目覚め、個人開発に勤しみました。最初は Udemy で The Complete 2021 Flutter Development Bootcamp with Dart という講座の受講をしました。英語でしたが、一石二鳥と思い頑張ってやりました。先生のくれる言葉もすごく素敵で良かったです。
The Complete 2021 Flutter Development Bootcamp with Dart 2021 年 4 月に異動をして TypeScript をやることになったので、慌ててこれまた Udemy にて超 TypeScript 入門 完全パックを受講しました。
動画学習好きすぎる。
超 TypeScript 入門 完全パック(2021) それを一通りやったらまた Flutter に戻って、自作アプリを作成することにし、公開してないものも含めると 2021 年 10 月までに 3 本アプリを作成することができました。これでお金が稼げたとかではないのですが、やり遂げるという感覚を久々に味わえたことがとてもよかったです。</description></item><item><title>portfolio作った</title><link>https://joooi13.github.io/posts/portfolio/</link><pubDate>Wed, 22 Sep 2021 00:00:00 +0000</pubDate><guid>https://joooi13.github.io/posts/portfolio/</guid><description>完全に思いつきですよ。
成果物 https://joooi13.dev/
やる気があるときに。。 急に作りはじめるなんて時間に余裕が出た証拠ですが、やる気のある内にということで。
事前調査として Twitter でフォローしている界隈のエンジニアのプロフィール URL を見てみました。
はてぶ・GitHub・自作サイトに設定している人が多かったですが、その中で特に自作(ドメインがその方のアカウントになっていたり、.dev になっていたり)してる方を見させてもらいました。良いものは真似る精神で、手が出しやすそうなものを選定してみました。
まずは Hugo でページを作って、Firebase Hosting でサイト公開しました。
前にノリで Google Domains でドメインを取得してずっと寝かせていたので、カスタムドメインにそれを割り当ててあげました。ページ自体は Hugo に頼って自分の各種 SNS 紐付けたくらいですが、頼ったことでスッキリさくっと仕上がってよかったです。
この勢いでブログも Hugo で作ってぶら下げようかなーとも思ったのですが、個人的にはてぶ → note と使ってきてまた変えるのかという気持ちと、ブログ全然書かないのでこのままでいいかという気持ちで一旦ステイです。プロフィール写真は今年撮った久々にばっさり髪を切った時のものにしました。
これも暫定的に設定しましたが、ちゃんと綺麗な写真とりに行きたいなと思ってます。暫定で設定したものって結局そのままになる気がしますが。
portfolio と呼ぶにはスキルとか業務歴の記載が足りないので、ちょこちょこ書いていこうと思います。</description></item><item><title>『チームで育てるAndroidアプリ設計』を読んで</title><link>https://joooi13.github.io/posts/team/</link><pubDate>Tue, 27 Apr 2021 00:00:00 +0000</pubDate><guid>https://joooi13.github.io/posts/team/</guid><description>はじめに この記事は PR です。
エンジニアとしての先輩であり、飲み友達であり、この本の執筆者である釘宮さんに献本いただきましたので、レビューを書きます。
まずは釘宮さん横幕さん執筆お疲れ様でした！
この本はもちろんですが、Android 界隈において定期的に登壇やアウトプットを続けておられること、本当に尊敬します。
チームで育てる Android アプリ設計 - PEAKS
読んだ視点 自分は既に Android エンジニアと名乗れる者ではなく、過去に 2-3 年ほど Android 開発に従事し、現在はサーバサイドやフロントエンドなど主に web サービスの開発に携わっている立場になります。なので感想も Android 寄りのものではないです。
ただ、私のようなエンジニアって案外いるのではないでしょうか？この本について、いまはもう Android やってないから全く理解できない〜ということはなかったよと言いたいです。事例は Android なので、代表的なアーキテクチャ知ってるという方は理解できるのではと思います。
Android 開発未経験という方や、これから頑張りたい方はまず用語が分からないと思うので、理解が難しい部分が多いでしょう。ですがその際は PEAKS から出ている以下の本も合わせて読んでみると良さそうです。
Android アプリ設計パターン入門 - PEAKS
別の本の話をしちゃいました。では本題です。
本の構成について まず、前提として本書は Android のアーキテクチャ自体を学ぶものではなく、各々のチームでどう取り入れ運用していくかという話になります。アーキテクチャ、チームで頑張りたいけどどう進めていったらいいか分かんない！そんな課題を解決してくれる本だそうです。
全 9 章で構成されています。ざっくりと書くと以下です。
1〜4 章：新規開発でのアーキテクチャについて 5〜8 章：大規模開発でのアーキテクチャについて 9 章：新規と大規模の違いについて理解を深める 1〜4 章について 新規開発でのアーキテクチャとはこうすべきだ。の前に、そもそも新規開発ってこういうものだよねというところからです。ある程度ルールがないと秩序は乱れてしまう。まるで社会全体みたいな話からスタートします。アーキテクチャの必要性を理解しながら読み進めることができます。アーキテクチャを構成していく過程やチームとしてどう向き合って行くのか。また、それをどう広げていくかといった方法まで説明されていました。
以下、個人的に印象に残った箇所です。
2 章-2：選定の過程 会社のルールが選定の過程に入っていたので、一般的な本でなかなかこの視点無いかもと思いちょっと親近感がわきました。
3 章-2：選定したアーキテクチャを浸透させていく ここにはサンプルコードを用意する事例があり丁寧すぎるとびっくりしました・・・。
今までそのようなチームに入ったことはないという意味です。自分も当然やったことないです。やっていかなきゃですね。
5〜8 章について チームは変化しつづけるという状態や、新メンバーが来たときなんていう大規模開発あるあるな状況が書かれていました。また、アーキテクチャはどのようなことを想定して作るべきか、そしてチーム全体で納得して進めていく中でそれはどういう効果を持つか。チームを取り巻く環境がリアルでとても読み進めやすかったです。
以下、個人的に印象に残った箇所です。
5 章-2：大規模開発をうまく進めるために必要な要素 多くのエンジニアに参考になりそうです。ちょっと意図とは違うかもしれませんがリーダブルコードを思い出しました。</description></item><item><title>買い物リストの管理を簡単にしたい</title><link>https://joooi13.github.io/posts/shopping-list/</link><pubDate>Sat, 10 Oct 2020 00:00:00 +0000</pubDate><guid>https://joooi13.github.io/posts/shopping-list/</guid><description>きっかけ 簡単に家族でショッピングリストを共有したいなと思った。
どこかに日頃から書き込むようにすればいいのだがパッと記載できるものが定まらずなんとなく Google Home アプリのショッピングリストを使っていたりした。
「OK Gooogle、ショッピングリストに”卵”を追加して」
これで追加出来るわけだが、なんと音声で削除ができない。
削除するには、Google ホームアプリ &amp;gt; メニュー &amp;gt; ショッピングリストと遷移して手動で消すみたいなフローになる。(音声で出来る方法があったら本当にすみません)
音声でリストに追加できるのはとても利便性がよいのだが、やっぱりテキストベースでも簡単に操作できたらいいなあという思いがあったり、実は声でなかなか追加しなかったりする現状もある。
やりたいこと 考えたのが LINE の Messaging API を利用して Bot を作成する方法だった。イメージとしてはこんな感じ。
買いたいものを日頃から思いついた時に各々 Bot に送り、それが共通のリストに追加される。買い物の時にそれを一覧としてざっと表示されれば嬉しい。さらに、削除も簡単にできたら利便性がいい。
やったこと ① LINE Developers に登録でアカウントを作成
LINE Developers
② &amp;ldquo;お買い物リスト&amp;quot;のチャンネルを作成する。Messaging API を使う。
Messaging API
③ リスト管理用の Google スプレッドシートを用意
④ GAS をサーバとして API を作成。
ここで ③ で用意したスプレッドシートに書き込み・削除ができるように実装している。
⑤ Messaging API の Webhook 設定に GAS で作成した API を指定
ざっくりこんな感じで実現させた。
結局 Google ホームアプリのショッピングリストは使わなかったが、スプレッドシートでやりたいことが実現できた。
完成形 LINE で実際に操作したキャプチャが以下。</description></item><item><title>社会人10年目を迎えた話</title><link>https://joooi13.github.io/posts/10nen/</link><pubDate>Sat, 15 Aug 2020 00:00:00 +0000</pubDate><guid>https://joooi13.github.io/posts/10nen/</guid><description>こんにちは。社会人 10 年目を迎えました、じょいです。
ここまで何とか働いて来れたので社会人としての半生を自己紹介がてら書いてみようと思います。
簡単に言うと私はこれまで二度転職を経験していて、営業職-&amp;gt;エンジニアという異業種にジョブチェンジをしているという経歴です。
一社目 大阪にある商社にて営業職として勤務していました。
飛び込み営業や電話営業を主に行っていて、それはそれはゴリゴリの営業を経験しました。
勤務形態としては早出＆残業からの土曜出社有りで、入社して数カ月後には立派な社畜と化しました。鳥貴族で 23 時スタートの飲み会に頻繁に参加していた頃が一番染まっていたと思います。ただ新卒で入社した自分にはこれが普通なのではと感じていた部分があったし、社会人としてやっていく厳しさを知ったのがこの時ですね。そして根性だけは本当につきました。
ここまで書くとどんどん会社が嫌になって、その結果退職したという印象を受けるかもしれませんが、決してそれだけれはないです。
当時、会計等の管理ソフトを toB 向けに販売していましたが、それをユーザ用に一部カスタマイズをして納品する業務を行なっていました。ちょこっとしたことではありましたが、その業務を「これちょっとおもろいのでは」と感じたことが後にエンジニアへ興味を持ったきっかけとなりました。
また、キャリアウーマンに憧れていて、長らく働いて生きていたいと思っていたのですが、この生活を仮に 10 年続けるのは厳しいという感情が徐々に芽生えていきました。（もっと早く気付いてくれ）
社畜として成長した私でしたが、この生活に 2 年弱で終止符を打つことにしたました。ただここでは 5 年分働いたと今でも思います。
田舎者なので、25 歳までに関東に住みたいとう野望がありました。 そこで仕事を見つけて格好よく働けたら幸せかもしれないという希望もあり、転職活動では東京を視野に入れることにしました。
先程書いたきっかけもあり、未経験でエンジニアになれないかリサーチをして、割と未経験でも募集があることを知りました。文系出身の自分でも例外では無く、エンジニアの教育に力を入れている会社に運良く内定をいただくことができました。歯が痛いと嘘をついて面接を受けにいったり、初めてリモート面接をしてもらったり、この頃の転職エピソードは別記事で書けそうなくらいのボリューム感です。
二社目 こうして、まもなく社会人 3 年目を迎えようかという頃にエンジニアとして転職ができた自分でしたが、学ぶことが想像の何百倍も多く苦労しました。8 時間のプログラミング研修後、深夜のデニーズでわかりやすい Java を抱えながら一人で勉強したことをよく覚えています。（大概のドキュメントはネット上にあることも後に学んだ）研修時間だけでは理解ができない部分が多すぎて、会社の先輩に大変お世話になりました。
わかりやすい Java オブジェクト指向入門編 研修後は EC サイトのテスターから始まり、徐々に簡単な開発を任せてもらえるようになりました。 お客さん先に行って働くというスタイルでいくつかの現場を経験しましたが、どこも優しく良い環境ばかりでした。
運がよかったのかもしれませんが、IT の現場はブラックだのという前情報とは全う世界でした。
採用活動や社内の勉強会にも参加しました。福岡や大阪に出張して採用活動をし、帰ってきたら開発の仕事をして、たまに土日に転職活動フェアに出展する手伝いをしたり。この頃は若さも相まってかなり精力的に活動していた時期でした。本当に。
それらをやりたいと手を挙げていて、いろんな事を経験したいという欲求が強かったです。 丸 4 年を迎えようとしているときに、頑張りを認めていただき社内で大きな賞をもらうことができました。副賞としてシンガポールに研修に連れて行っていただき、一生の思い出になりました。
ある意味ここでやりきった感が出たのかもしれないです。
二社目の会社には本当にお世話になりましたが、30 歳までにさらにステップアップしたいという思いもあり転職を考えるようになりました。。なぜ 30 歳なのかというと、当時の自分は 30 歳に非常に大きな節目を感じていて、根拠はないのですが 30 歳で絶対何かが大きく変わるし、死ぬかもしれないと感じていました。ここはちょっとネタっぽいが本当の話で、友人とよくそろそろ死ぬのではという会話をしてました（笑）結局先が見えてない不安から来ていた発言だったんと思いますが。
三社目 やっと現在。
今の会社に入る前後が一番活発に Tech 系のイベントに参加していました。
そこでいろんな会社の情報を聞いたり、自分の方向性を考えた結果いまの会社にいます。
もう一度しっかり努力して、エンジニアとして頑張ろうと決心の転職です。
業務としては決済系で、初めての領域。自分の知識の無さを日々実感できるよい環境で働くことができています。これは非常に重要なことだと思っていて、結局成長したいし生産性を感じたい。また、慣れや会社の制度要因もありますが、今の会社が一番自由度高く働けています。「オフィスでも家でも自由な場所で働ける」とか「時にはちょっと早く上がってもいい」とか働く上での選択肢が増えることがこんなに素晴らしいんだということを知りました。
今の会社では丸 3 年、社会人としては 10 年目を迎えました。年齢的にもベテランの域に入り、知っていることも増えているはずなのに分からない事が多い。自信をなくすことのほうが多いですが、これからもその繰り替えしなのだなと悟ってます。</description></item><item><title>CameraX</title><link>https://joooi13.github.io/posts/camerax/</link><pubDate>Mon, 16 Sep 2019 00:00:00 +0000</pubDate><guid>https://joooi13.github.io/posts/camerax/</guid><description>CameraX CameraX は、カメラアプリの開発を簡単に行うための Jetpack サポート ライブラリです。 Camera2 API の機能を簡単に利用することができます。
Android5.0 以上で動作するので、幅広いデバイスで安定して動作させることができます。
CodeLab 例によって CodeLab やりましょう。
まずは build.gradle の dependencies に CamelaX を追加(alpha 版)
View を用意。TextureView(高速描画の view component)
*端末で Camera の使用を許可するため、AndroidManifest.xmlにパーミッションを追加
previewを実装。撮影する枠の大きさなど指定 *ImageCapture 実装。この時、撮影のトリガーとなるボタンも view に追加
ImageAnalysis クラス実装
（Firebase や MLKit などの機械学習で使えるようです ）
preview
ImageCapture ImageAnalysis それぞれ bindToLifecycle で読み込ませる。
ImageAnalysis ってなんぞや？と思い質問させていただたところ、
画像の平均輝度を数値で計ることができるとのことでした。
検証 1：明るい壁を撮影 検証 2：真っ暗にして撮影 まとめ Camera2 API を使うと、プレビューを表示させることすら大変らしい・・
ですが、CameraX を使うと、簡単なカメラアプリを作る程度ならとても良さそう！</description></item><item><title>Android Things Starter Kitを試す</title><link>https://joooi13.github.io/posts/androidthings-starterkit/</link><pubDate>Sun, 08 Sep 2019 00:00:00 +0000</pubDate><guid>https://joooi13.github.io/posts/androidthings-starterkit/</guid><description>引っ越しをしたら Android Things Starter Kit が発掘されたので
今更作ってみることにした。(ごめんなさい)
Android Things とは Google 提供の IoT のプラットフォーム。 現在の位置付けは、下記のようなお知らせの通り。
Android Things Starter kit とは Android Thingsを体験できる。
必要なものは全て入っていて、何か買い足したりする必要なく入門ができる。 電子工作未経験でもお手軽に実施できて嬉しい。
開封するとこんな感じ
組み立て tutorial を元に通りに組み立て。30-40 分くらいあればできる。
サポートアプリもある。
CodeLab 日本語版の CodeLab が理解しやすそうだったので、こちらにチャレンジ。
作成した Kit と PC を接続して、AndroidStudio で build することができる。
ディスプレイに任意の文字を表示してみたり、ブザーを鳴らしたり。
Androidセンサーを使って温度や湿度を感知できるので、 晴れだったら SUNNY&amp;hellip;と表示させたりすることもできそう。
やってみるとかなりお手軽にできた！</description></item><item><title>Yahoo Japan Tech Conference 2019に参加しました</title><link>https://joooi13.github.io/posts/yahoojapan-techconference2019/</link><pubDate>Sun, 27 Jan 2019 00:00:00 +0000</pubDate><guid>https://joooi13.github.io/posts/yahoojapan-techconference2019/</guid><description>YJTC 初参加！
以下、印象に残った部分のメモ。
基調講演 ヤフーが大切にしていること。
ユーザのアクションを最大化しよう！ AI に特化したスパコンkukai（2015 年〜）のお話。 水分に弱いのが一般的なデータセンターだが、 kukai は液体で冷やしているいて、壁に穴を開けて設置している。 kukai とは
簡単なことは一つもないけど、未来を作るのは楽しい。 セキュア通信レベル向上
201806 TLS1.2 に切り替え
SSL/TLS1.0,1.1 は利用停止
他社の動きの影響は割と大きい。
AppleのHTTPSの話やGoogleの話。
売上への影響より安全を優先し、全サービス以降を決意。 一般の人への告知は難しい・・判定結果のページを表示 世界標準 CVSS に沿って取り組んでいく。 www.slideshare.net
もう道に迷わない！ Yahoo! MAP における AR 体験 iOS限定の ARKit を使った道案内機能のお話。
技術面 AR モードの開発チームは３人で、
開発は名古屋とデザイナーは東京という体制。 ARKit オブジェクトの種類の説明 ゴールは、常にユーザの方をみるように実装している GeoMetry と Texture を適切に設定すると AR の世界に様々なものを配置できる。
→ 少人数でもナビゲーションを使うことができる！ AR 特有のユースケースについて
2D ：
ルート確認や俯瞰できる
3D：
いまこの瞬間に向かうべき方向の案内 現在地周辺にフォーカスできる 日本はまだまだ AR 体験に慣れている人が少ないので、
ルートから外れた場合のフィードバックも大切にしている。
ユーザにとって危ないシーンでは使えないようにする。
（暗闇など 新しいものを取り入れる場合は、
あらゆる可能性を想定しなければならない。 ゴール時の癒やしにより、何度も遊びたくなる。</description></item><item><title>DevFest Tokyo 2018</title><link>https://joooi13.github.io/posts/devfest-tokyo2018/</link><pubDate>Sat, 08 Sep 2018 00:00:00 +0000</pubDate><guid>https://joooi13.github.io/posts/devfest-tokyo2018/</guid><description>DevFest Tokyo 2018 DevFest Tokyo に今年も参加してきた。
自分が聞いたセッションと自分の発表のメモです。
Flutter アニメーションの実装方法 アニメーションを実装する基本の流れを見せていただいた。
手順を順に見せていただき、
毎回こにふぁーさんのセッションは非常に聞きやすくたのしい。
PWA now feature FIRE というのを初めて知った。
ユーザ体験を向上させる要素である。
Fast
サイトの表示を早くする
Integrated
他のネイティブアプリと変わらないユーザ体験を摩擦なく
Reliable
どんな状況でも動く。信頼できる
Engaging
魅力的な
一番大事なこと。
オフラインのプッッシュ
バックグラウンドでも ok
ブラウザのサポート
Polymer
push について
ページをロードしたときにプッシュ通知の許可を求めるのはやめる。
これはアンチパターン。 → 許可を求めるストーリーを考える
デザインについて
ネイティブアプリに近いので、ネイティブアプリっぽいデザインは必要になってくる。
普通のアプリはオフライン時のデザインがないが必要である。
web に加えて考える必要があるデザインが多い。
Firebase Overview for native application firebase 入門
firebase いれたい Prediction firestore とりあえずいれとけってやつ。
clashlitics おなじみのやーつ。
会場ではあまり入れている人はいなかった。
Paformans アプリのパフォーマンスを測定
起動にかかる時間や滞在時間やスクリーンの描画にかかる時間などなど
GA for Firebase
AppIndexing
Prediction について
→ これ知らなかった。
7 日間のデータを元にユーザの次の行動を予測する</description></item><item><title>Google I/O 2018に参加しました</title><link>https://joooi13.github.io/posts/googleio-2018/</link><pubDate>Sun, 13 May 2018 00:00:00 +0000</pubDate><guid>https://joooi13.github.io/posts/googleio-2018/</guid><description>初参加！ 2018/05/08-10 に開催された、Google I/O 2018 に初めて参加をした。
自分が聞いた session などまとめていく。
DAY 01 前日にバッチのピックアップへ行き、そこでグッズを貰えました。
この中から必要なものだけ持参し、
朝食のベーグル＆コーヒーをゲットして Amphitheatre へ！
とにかく人が多かった。
keynote Amphitheatre に入ったときは本当に感動した。
Google AI
・医療機関での活躍の紹介
・同時に発せられる言葉を分けるデモ
・Gmail のサジェスト機能は今月提供される
・Google Photo では明るさをサジェスト＆固定したり、撮影したドキュメントを pdf にできるようになる。また、背景だけ灰色にしたり、過去の撮影した写真の色を再現できる。これらは次の数ヶ月間に提供したいとのことだった。
・Google Assistant については、６つの新しい声を発表。John Legendという有名な歌手？の声も追加。 Assistant
・新しいデバイスの発表があった。スマートディスプレイ
・スタバの注文（他のパートナーも多く来ている）のデモ
・google マップの進化（この夏）
・Assistant がサロンに電話をかけ、人間とやり取りし、予約するデモ。相槌もできる。これは今後さらに実験していく予定 Google News
・top5 の記事を出す
・デザインの変更
・好きな出版社の記事を購読できる Android P
・bata 版の発表。
・テーマは、Intelligence、Simplicity、Digital wellbeing
・バッテリー問題は常にあり、明るさを自動で調整する機能を提供
・使うアプリを予測し、上に並べてくれる。また、行動を予測し、電話の相手などサジェストしてくれる。 ML Kit
・bata 版をリリース ・そういえば pre-show でも ML が使われていたらしい？ 新しい Android のデザインと UI
・電話を裏返しておけば通知が来ない</description></item><item><title>About</title><link>https://joooi13.github.io/about/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://joooi13.github.io/about/</guid><description>Career Software Engineer since 2013.
2013 - Rakus Inc.
2018 - Yahoo! JAPAN
Experiences Java,Android,PHP,TypeScript,Flutter.
DroidGirls organizer.
Java Beginner Instructor.</description></item></channel></rss>